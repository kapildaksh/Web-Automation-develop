/*
 * Testing Service API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devops@prenetics.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.prenetics.swagger.testing.handler;

import com.google.gson.reflect.TypeToken;
import com.prenetics.swagger.testing.model.AccountModel;
import com.prenetics.swagger.testing.model.ErrorResponse;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import com.prenetics.swagger.testing.invoker.JSON;

import static io.restassured.http.Method.*;

public class CustomerApi {

    private RequestSpecBuilder reqSpec;

    private CustomerApi(RequestSpecBuilder reqSpec) {
        this.reqSpec = reqSpec;
    }

    public static CustomerApi customer(RequestSpecBuilder reqSpec) {
        return new CustomerApi(reqSpec);
    }


    public DeleteCustomerOper deleteCustomer() {
        return new DeleteCustomerOper(reqSpec);
    }

    public GetAvailableAccountOper getAvailableAccount() {
        return new GetAvailableAccountOper(reqSpec);
    }

    /**
    * Customise request specification
    */
    public CustomerApi reqSpec(Consumer<RequestSpecBuilder> consumer) {
        consumer.accept(reqSpec);
        return this;
    }

    /**
     * Delete a customer
     * Delete a customer
     *
     * @see #accountPath account (required)
     */
    public class DeleteCustomerOper {

        public static final String REQ_URI = "/v1.0/customer/account/{account}";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public DeleteCustomerOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public DeleteCustomerOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /v1.0/customer/account/{account}
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(DELETE, REQ_URI));
        }

        /**
         * @param account (String) account (required)
         */
        public DeleteCustomerOper accountPath(Object account) {
            reqSpec.addPathParam("account", account);
            return this;
        }

        /**
         * Customise request specification
         */
        public DeleteCustomerOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public DeleteCustomerOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get an available account name
     * Get an available account name
     *
     * return AccountModel
     */
    public class GetAvailableAccountOper {

        public static final String REQ_URI = "/v1.0/customer/available_account";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public GetAvailableAccountOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public GetAvailableAccountOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /v1.0/customer/available_account
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(GET, REQ_URI));
        }

        /**
         * GET /v1.0/customer/available_account
         * @return AccountModel
         */
        public AccountModel executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<AccountModel>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * Customise request specification
         */
        public GetAvailableAccountOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public GetAvailableAccountOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
}