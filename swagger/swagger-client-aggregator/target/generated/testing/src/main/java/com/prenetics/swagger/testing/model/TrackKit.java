/*
 * Testing Service API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devops@prenetics.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.prenetics.swagger.testing.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * TrackKit
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-01-18T18:14:02.083+08:00")
public class TrackKit {
  @SerializedName("registered")
  private String registered = null;

  @SerializedName("sample_in_lab")
  private String sampleInLab = null;

  @SerializedName("sample_processing")
  private String sampleProcessing = null;

  @SerializedName("report_complete")
  private String reportComplete = null;

  public TrackKit registered(String registered) {
    this.registered = registered;
    return this;
  }

   /**
   * YYYY-MM-DDTHH:mm:ssZ
   * @return registered
  **/
  @ApiModelProperty(example = "2017-04-01T15:34:41+08:00", value = "YYYY-MM-DDTHH:mm:ssZ")
  public String getRegistered() {
    return registered;
  }

  public void setRegistered(String registered) {
    this.registered = registered;
  }

  public TrackKit sampleInLab(String sampleInLab) {
    this.sampleInLab = sampleInLab;
    return this;
  }

   /**
   * YYYY-MM-DDTHH:mm:ssZ
   * @return sampleInLab
  **/
  @ApiModelProperty(example = "2017-04-02T15:34:41+08:00", value = "YYYY-MM-DDTHH:mm:ssZ")
  public String getSampleInLab() {
    return sampleInLab;
  }

  public void setSampleInLab(String sampleInLab) {
    this.sampleInLab = sampleInLab;
  }

  public TrackKit sampleProcessing(String sampleProcessing) {
    this.sampleProcessing = sampleProcessing;
    return this;
  }

   /**
   * YYYY-MM-DDTHH:mm:ssZ
   * @return sampleProcessing
  **/
  @ApiModelProperty(example = "2017-04-03T15:34:41+08:00", value = "YYYY-MM-DDTHH:mm:ssZ")
  public String getSampleProcessing() {
    return sampleProcessing;
  }

  public void setSampleProcessing(String sampleProcessing) {
    this.sampleProcessing = sampleProcessing;
  }

  public TrackKit reportComplete(String reportComplete) {
    this.reportComplete = reportComplete;
    return this;
  }

   /**
   * YYYY-MM-DDTHH:mm:ssZ
   * @return reportComplete
  **/
  @ApiModelProperty(example = "2017-04-04T15:34:41+08:00", value = "YYYY-MM-DDTHH:mm:ssZ")
  public String getReportComplete() {
    return reportComplete;
  }

  public void setReportComplete(String reportComplete) {
    this.reportComplete = reportComplete;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrackKit trackKit = (TrackKit) o;
    return Objects.equals(this.registered, trackKit.registered) &&
        Objects.equals(this.sampleInLab, trackKit.sampleInLab) &&
        Objects.equals(this.sampleProcessing, trackKit.sampleProcessing) &&
        Objects.equals(this.reportComplete, trackKit.reportComplete);
  }

  @Override
  public int hashCode() {
    return Objects.hash(registered, sampleInLab, sampleProcessing, reportComplete);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrackKit {\n");
    
    sb.append("    registered: ").append(toIndentedString(registered)).append("\n");
    sb.append("    sampleInLab: ").append(toIndentedString(sampleInLab)).append("\n");
    sb.append("    sampleProcessing: ").append(toIndentedString(sampleProcessing)).append("\n");
    sb.append("    reportComplete: ").append(toIndentedString(reportComplete)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

