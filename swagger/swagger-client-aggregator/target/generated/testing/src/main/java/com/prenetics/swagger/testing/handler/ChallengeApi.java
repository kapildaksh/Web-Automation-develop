/*
 * Testing Service API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devops@prenetics.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.prenetics.swagger.testing.handler;

import com.google.gson.reflect.TypeToken;
import com.prenetics.swagger.testing.model.Challenge;
import com.prenetics.swagger.testing.model.ChallengeList;
import com.prenetics.swagger.testing.model.ChallengeReset;
import com.prenetics.swagger.testing.model.ErrorResponse;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import com.prenetics.swagger.testing.invoker.JSON;

import static io.restassured.http.Method.*;

public class ChallengeApi {

    private RequestSpecBuilder reqSpec;

    private ChallengeApi(RequestSpecBuilder reqSpec) {
        this.reqSpec = reqSpec;
    }

    public static ChallengeApi challenge(RequestSpecBuilder reqSpec) {
        return new ChallengeApi(reqSpec);
    }


    public GetChallengeOper getChallenge() {
        return new GetChallengeOper(reqSpec);
    }

    public GetChallengesOper getChallenges() {
        return new GetChallengesOper(reqSpec);
    }

    public ResetChallengeOper resetChallenge() {
        return new ResetChallengeOper(reqSpec);
    }

    public UpdateChallengeOper updateChallenge() {
        return new UpdateChallengeOper(reqSpec);
    }

    /**
    * Customise request specification
    */
    public ChallengeApi reqSpec(Consumer<RequestSpecBuilder> consumer) {
        consumer.accept(reqSpec);
        return this;
    }

    /**
     * Get a challenge
     * Get a challenge
     *
     * @see #serviceaccountPath Service account (required)
     * @see #typePath challenge type (required)
     * return Challenge
     */
    public class GetChallengeOper {

        public static final String REQ_URI = "/v1.0/challenge/serviceaccount/{serviceaccount}/type/{type}";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public GetChallengeOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public GetChallengeOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /v1.0/challenge/serviceaccount/{serviceaccount}/type/{type}
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(GET, REQ_URI));
        }

        /**
         * GET /v1.0/challenge/serviceaccount/{serviceaccount}/type/{type}
         * @return Challenge
         */
        public Challenge executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Challenge>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * @param serviceaccount (String) Service account (required)
         */
        public GetChallengeOper serviceaccountPath(Object serviceaccount) {
            reqSpec.addPathParam("serviceaccount", serviceaccount);
            return this;
        }

        /**
         * @param type (String) challenge type (required)
         */
        public GetChallengeOper typePath(Object type) {
            reqSpec.addPathParam("type", type);
            return this;
        }

        /**
         * Customise request specification
         */
        public GetChallengeOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public GetChallengeOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get all challenges
     * Get all challenges
     *
     * @see #serviceaccountPath Service account (required)
     * return ChallengeList
     */
    public class GetChallengesOper {

        public static final String REQ_URI = "/v1.0/challenge/serviceaccount/{serviceaccount}";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public GetChallengesOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public GetChallengesOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /v1.0/challenge/serviceaccount/{serviceaccount}
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(GET, REQ_URI));
        }

        /**
         * GET /v1.0/challenge/serviceaccount/{serviceaccount}
         * @return ChallengeList
         */
        public ChallengeList executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<ChallengeList>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * @param serviceaccount (String) Service account (required)
         */
        public GetChallengesOper serviceaccountPath(Object serviceaccount) {
            reqSpec.addPathParam("serviceaccount", serviceaccount);
            return this;
        }

        /**
         * Customise request specification
         */
        public GetChallengesOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public GetChallengesOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Reset challenge
     * Reset challenge
     *
     * @see #body service account detail (required)
     */
    public class ResetChallengeOper {

        public static final String REQ_URI = "/v1.0/challenge_reset";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public ResetChallengeOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public ResetChallengeOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /v1.0/challenge_reset
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(POST, REQ_URI));
        }

         /**
         * @param body (ChallengeReset) service account detail (required)
         */
        public ResetChallengeOper body(ChallengeReset body) {
            reqSpec.setBody(body);
            return this;
        }

        /**
         * Customise request specification
         */
        public ResetChallengeOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public ResetChallengeOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Update challenge
     * Update challenge
     *
     * @see #accountPath account/email (required)
     * @see #body challenge list (required)
     */
    public class UpdateChallengeOper {

        public static final String REQ_URI = "/v1.0/challenge/account/{account}";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public UpdateChallengeOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public UpdateChallengeOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /v1.0/challenge/account/{account}
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(PATCH, REQ_URI));
        }

         /**
         * @param body (ChallengeList) challenge list (required)
         */
        public UpdateChallengeOper body(ChallengeList body) {
            reqSpec.setBody(body);
            return this;
        }

        /**
         * @param account (String) account/email (required)
         */
        public UpdateChallengeOper accountPath(Object account) {
            reqSpec.addPathParam("account", account);
            return this;
        }

        /**
         * Customise request specification
         */
        public UpdateChallengeOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public UpdateChallengeOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
}