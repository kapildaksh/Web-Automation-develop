/*
 * Testing Service API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: devops@prenetics.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.prenetics.swagger.testing.handler;

import com.google.gson.reflect.TypeToken;
import com.prenetics.swagger.testing.model.BarcodeModel;
import com.prenetics.swagger.testing.model.ErrorResponse;
import com.prenetics.swagger.testing.model.TrackKitRequest;
import com.prenetics.swagger.testing.model.TrackKitsRequest;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import com.prenetics.swagger.testing.invoker.JSON;

import static io.restassured.http.Method.*;

public class LabApi {

    private RequestSpecBuilder reqSpec;

    private LabApi(RequestSpecBuilder reqSpec) {
        this.reqSpec = reqSpec;
    }

    public static LabApi lab(RequestSpecBuilder reqSpec) {
        return new LabApi(reqSpec);
    }


    public CreateBarcodeOper createBarcode() {
        return new CreateBarcodeOper(reqSpec);
    }

    public GetBarcodeOper getBarcode() {
        return new GetBarcodeOper(reqSpec);
    }

    public UpdateKitStatusOper updateKitStatus() {
        return new UpdateKitStatusOper(reqSpec);
    }

    public UpdateKitStatusServiceAccountOper updateKitStatusServiceAccount() {
        return new UpdateKitStatusServiceAccountOper(reqSpec);
    }

    public UpdateProductKitStatusOper updateProductKitStatus() {
        return new UpdateProductKitStatusOper(reqSpec);
    }

    public UpdateProductKitStatusServiceAccountOper updateProductKitStatusServiceAccount() {
        return new UpdateProductKitStatusServiceAccountOper(reqSpec);
    }

    /**
    * Customise request specification
    */
    public LabApi reqSpec(Consumer<RequestSpecBuilder> consumer) {
        consumer.accept(reqSpec);
        return this;
    }

    /**
     * Generate a new kit barcode
     * Generate a new kit barcode
     *
     * @see #providerPath Kit provider (required)
     * return BarcodeModel
     */
    public class CreateBarcodeOper {

        public static final String REQ_URI = "/v1.0/barcode/provider/{provider}";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public CreateBarcodeOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public CreateBarcodeOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /v1.0/barcode/provider/{provider}
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(POST, REQ_URI));
        }

        /**
         * POST /v1.0/barcode/provider/{provider}
         * @return BarcodeModel
         */
        public BarcodeModel executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<BarcodeModel>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * @param provider (String) Kit provider (required)
         */
        public CreateBarcodeOper providerPath(Object provider) {
            reqSpec.addPathParam("provider", provider);
            return this;
        }

        /**
         * Customise request specification
         */
        public CreateBarcodeOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public CreateBarcodeOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get an available kit barcode
     * Get an available kit barcode
     *
     * @see #providerPath Kit provider (required)
     * return BarcodeModel
     */
    public class GetBarcodeOper {

        public static final String REQ_URI = "/v1.0/barcode/provider/{provider}";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public GetBarcodeOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public GetBarcodeOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /v1.0/barcode/provider/{provider}
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(GET, REQ_URI));
        }

        /**
         * GET /v1.0/barcode/provider/{provider}
         * @return BarcodeModel
         */
        public BarcodeModel executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<BarcodeModel>(){}.getType();
            return execute(handler).as(type);
        }

        /**
         * @param provider (String) Kit provider (required)
         */
        public GetBarcodeOper providerPath(Object provider) {
            reqSpec.addPathParam("provider", provider);
            return this;
        }

        /**
         * Customise request specification
         */
        public GetBarcodeOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public GetBarcodeOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Update kit status
     * Update kit status
     *
     * @see #accountPath account (required)
     * @see #body kit status (required)
     */
    public class UpdateKitStatusOper {

        public static final String REQ_URI = "/v1.0/customer/account/{account}/track_kit";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public UpdateKitStatusOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public UpdateKitStatusOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PUT /v1.0/customer/account/{account}/track_kit
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(PUT, REQ_URI));
        }

         /**
         * @param body (TrackKitRequest) kit status (required)
         */
        public UpdateKitStatusOper body(TrackKitRequest body) {
            reqSpec.setBody(body);
            return this;
        }

        /**
         * @param account (String) account (required)
         */
        public UpdateKitStatusOper accountPath(Object account) {
            reqSpec.addPathParam("account", account);
            return this;
        }

        /**
         * Customise request specification
         */
        public UpdateKitStatusOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public UpdateKitStatusOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Update kit status
     * Update kit status
     *
     * @see #serviceaccountPath service account (required)
     * @see #body kit status (required)
     */
    public class UpdateKitStatusServiceAccountOper {

        public static final String REQ_URI = "/v1.0/customer/serviceaccount/{serviceaccount}/track_kit";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public UpdateKitStatusServiceAccountOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public UpdateKitStatusServiceAccountOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PUT /v1.0/customer/serviceaccount/{serviceaccount}/track_kit
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(PUT, REQ_URI));
        }

         /**
         * @param body (TrackKitRequest) kit status (required)
         */
        public UpdateKitStatusServiceAccountOper body(TrackKitRequest body) {
            reqSpec.setBody(body);
            return this;
        }

        /**
         * @param serviceaccount (String) service account (required)
         */
        public UpdateKitStatusServiceAccountOper serviceaccountPath(Object serviceaccount) {
            reqSpec.addPathParam("serviceaccount", serviceaccount);
            return this;
        }

        /**
         * Customise request specification
         */
        public UpdateKitStatusServiceAccountOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public UpdateKitStatusServiceAccountOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Update kit status (product)
     * Update kit status (product)
     *
     * @see #accountPath account (required)
     * @see #body kit status (required)
     */
    public class UpdateProductKitStatusOper {

        public static final String REQ_URI = "/v1.0/customer/account/{account}/track_kit";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public UpdateProductKitStatusOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public UpdateProductKitStatusOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /v1.0/customer/account/{account}/track_kit
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(PATCH, REQ_URI));
        }

         /**
         * @param body (TrackKitsRequest) kit status (required)
         */
        public UpdateProductKitStatusOper body(TrackKitsRequest body) {
            reqSpec.setBody(body);
            return this;
        }

        /**
         * @param account (String) account (required)
         */
        public UpdateProductKitStatusOper accountPath(Object account) {
            reqSpec.addPathParam("account", account);
            return this;
        }

        /**
         * Customise request specification
         */
        public UpdateProductKitStatusOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public UpdateProductKitStatusOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Update kit status (product)
     * Update kit status (product)
     *
     * @see #serviceaccountPath service account (required)
     * @see #body kit status (required)
     */
    public class UpdateProductKitStatusServiceAccountOper {

        public static final String REQ_URI = "/v1.0/customer/serviceaccount/{serviceaccount}/track_kit";

        private RequestSpecBuilder reqSpec;

        private ResponseSpecBuilder respSpec;

        public UpdateProductKitStatusServiceAccountOper() {
            this.reqSpec = new RequestSpecBuilder();
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        public UpdateProductKitStatusServiceAccountOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /v1.0/customer/serviceaccount/{serviceaccount}/track_kit
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(PATCH, REQ_URI));
        }

         /**
         * @param body (TrackKitsRequest) kit status (required)
         */
        public UpdateProductKitStatusServiceAccountOper body(TrackKitsRequest body) {
            reqSpec.setBody(body);
            return this;
        }

        /**
         * @param serviceaccount (String) service account (required)
         */
        public UpdateProductKitStatusServiceAccountOper serviceaccountPath(Object serviceaccount) {
            reqSpec.addPathParam("serviceaccount", serviceaccount);
            return this;
        }

        /**
         * Customise request specification
         */
        public UpdateProductKitStatusServiceAccountOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         */
        public UpdateProductKitStatusServiceAccountOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
}